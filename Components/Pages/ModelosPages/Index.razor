@page "/Index"
@rendermode InteractiveServer

@inject ToastService Toast
@inject ModelosService modelosService

<PageTitle>Index</PageTitle>
<Toasts class="p-3" AutoHide="true" Delay="4000" Placement="ToastsPlacement.TopRight" />
<div class=container>
	<div class="card shadow-lg">
		@*HEADER*@
		<div class="card-header text-center">
			<h5><strong>Registro de Modelos</strong></h5>

			<div class="row">
				@*Desde*@
				<div class="col-3">
					<label class="col-form-label"><strong>Desde:</strong></label>
					<InputDate class="form-control" @bind-Value="Desde"></InputDate>
				</div>

				@*Hasta*@
				<div class="col-3">
					<label class="col-form-label"><strong>Hasta:</strong></label>
					<div class="input-group">
						<InputDate class="form-control" @bind-Value="Hasta"></InputDate>
					</div>
				</div>
			</div>
			<br />
			<div class="row">
				<div class="col-4 text-start">
					<label><strong>Filtrar:</strong></label>
					<div class="input-group" style="width: 250px">
						@*Campo Filtro*@
						<InputSelect class="form-select" @bind-Value="@valorFiltro">
							<option value="" selected disabled>Selecciona...</option>
							<option value="ID">ID</option>
							<option value="Nombre">Nombre</option>
							<option value="Fecha">Fecha</option>
						</InputSelect>

						@*Btn Restablecer filtro*@
						<button class="btn btn-outline-secondary bi bi-arrow-counterclockwise" style="width: 40px" @onclick="Restablecer"></button>
					</div>
				</div>

				@*Btn Buscar*@
				<div class="col text-start">
					<label><strong>Buscar:</strong></label>
					<div class="input-group" style="width: 500px">
						<input @bind="@searchBarValue" @onkeypress="HandleKeyDown" placeholder="Buscar" class="form-control" />
						<button @onclick="Buscar" class="btn btn-outline-success bi bi-search" type="button">Buscar</button>
					</div>
				</div>

				@*Btn crear*@
				<div class="col-2 text-start">
					<label></label>
					<div>
						<a class="btn btn-outline-primary bi bi-person-fill-add border-bottom" href="/Create">Crear</a>
					</div>
				</div>
			</div>
		</div>

		@*BODY*@
		<div class="card-body">
			<table class="table table-striped table-hover">
				<thead>
					<tr>
						<th><strong>ModeloId</strong></th>
						<th><strong>Nombre</strong></th>
						<th><strong>Sueldo</strong></th>
						<th><strong>Edit</strong></th>
						<th><strong>Eliminar</strong></th>
					</tr>
				</thead>

				<tbody>
					@foreach (var modelo in ListaModelos)
					{
						<tr>
							<th>@modelo.ModeloId</th>
							<th>@modelo.Nombres</th>
							<th>@modelo.Sueldo</th>
							<th>
								<a href="/Edit/@modelo.ModeloId" class="btn btn-outline-primary bi bi-pencil-square"></a>
							</th>
							<th>
								<a href="/Delete/@modelo.ModeloId" class="btn btn-outline-danger bi bi-trash"></a>
							</th>
						</tr>
					}
				</tbody>
			</table>
		</div>

		@*FOOTER*@
		<div class="card-footer">
			Cantidad total de Modelos: @ListaModelos.Count
		</div>
	</div>
</div>



@code {
	public Modelos Modelo { get; set; } = new Modelos();
	public List<Modelos> ListaModelos { get; set; } = new List<Modelos>();
	public string valorFiltro { get; set; } = "";
	public string searchBarValue { get; set; } = string.Empty;
	public DateTime? Desde { get; set; }
	public DateTime? Hasta { get; set; }

	protected override async Task OnInitializedAsync()
	{
		ListaModelos = await modelosService.Listar(c => true);
	}

	private async Task HandleKeyDown(KeyboardEventArgs e)
	{
		if (e.Key == "Enter")
			await Buscar();
	}

	public async Task Buscar()
	{
		if(string.IsNullOrEmpty(valorFiltro))
		{
			Toast.Notify(new(ToastType.Warning, $"Debe seleccionar una opción en el fitro"));
			ListaModelos = await modelosService.Listar(lt => true);
			return;
		}

		valorFiltro.Trim().ToLower();
		searchBarValue.Trim().ToLower();

		switch (valorFiltro)
		{
			case "ID":
				if (string.IsNullOrEmpty(searchBarValue))
				{
					Toast.Notify(new(ToastType.Warning, $"Debe proveer un ID para buscar"));
					return;
				}
				if (!searchBarValue.All(char.IsDigit))
				{
					Toast.Notify(new(ToastType.Warning, $"El criterio de búsqueda solo puede alojar numeros"));
					return;
				}
				if (int.TryParse(searchBarValue, out int id))
					ListaModelos = await modelosService.Listar(lt => lt.ModeloId == id);
				break;

			case "Nombre":
				if (string.IsNullOrEmpty(searchBarValue))
				{
					Toast.Notify(new(ToastType.Warning, $"Debe proveer un nombre para buscar"));
					return;
				}
				ListaModelos = await modelosService.Listar(lt => lt.Nombres.Trim().ToLower()
															.Contains(searchBarValue));
				break;

			case "Fecha":
				if (Desde == null || Hasta == null)
				{
					Toast.Notify(new(ToastType.Warning, $"Debe seleccionar fechas en ambos campos"));
					return;
				}
				ListaModelos = await modelosService.Listar(f => f.Fecha >= Desde && f.Fecha <= Hasta);
				break;
		}
		return;
	}

	private async Task Restablecer()
	{
		ListaModelos = await modelosService.Listar(t => true);
		valorFiltro = string.Empty;
		searchBarValue = string.Empty;
		Desde = null;
		Hasta = null;
	}
}
